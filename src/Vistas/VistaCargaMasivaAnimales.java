/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Vistas;

import Configuracion.ConfiguracionPropiedades;
import Configuracion.InformacionGlobal;
import Control.*;
import Excel.ControlArchivo;
import ImportExport.CargaMasiva;
import ImportExport.Estados;
import Utilidades.Expresiones;
import Utilidades.Utilidades;
import static Utilidades.datosUsuario.datos;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JOptionPane;

/**
 *
 * @author MERRY
 */
public class VistaCargaMasivaAnimales extends javax.swing.JPanel {

    public List<Map<String, String>> listaFincas;
    public List<Map<String, String>> listaTipoAnimales;
    public ControlGeneral controlgen = new ControlGeneral();
    public String idFinca;
    public String idTipoAnimal;
    public List<Map<String, String>> listaInfoLeida = new ArrayList<>();
    public List<Map<String, String>> listaIngresados = new ArrayList<>();
    public List<Map<String, String>> listaNoIngresados = new ArrayList<>();
    public ControlCargaMasivaAnimales controlCarga;
    private CargaMasiva thProceso;
    private Calendar cal;
    private SimpleDateFormat sdf;

    /**
     * Creates new form VistaCargaMasivaAnimales
     */
    public VistaCargaMasivaAnimales() {
        initComponents();
        txtRespuesta.setContentType("text/html");
        List<Map<String, String>> lista = new ArrayList<>();
        controlCarga = new ControlCargaMasivaAnimales();
        CargarListaFincas();
        thProceso = new CargaMasiva(this, Estados.CARGA_MASIVA_ANIMALES);
        sdf = new SimpleDateFormat("dd/MM/yyyy");
        cal = Calendar.getInstance();
        mostrarFecha();
        
        InformacionGlobal.setFincaDesdeConstructor(cbFinca);
        InformacionGlobal.setTipoAnimalDesdeConstructor(cbTipoAnimales);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        cbFinca = new javax.swing.JComboBox();
        lblTid = new javax.swing.JLabel();
        lblTid3 = new javax.swing.JLabel();
        cbTipoAnimales = new javax.swing.JComboBox();
        lblTid1 = new javax.swing.JLabel();
        txtURL = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel4 = new javax.swing.JPanel();
        btnSelectArchivo = new javax.swing.JButton();
        btnCargar = new javax.swing.JButton();
        scroll = new javax.swing.JScrollPane();
        txtRespuesta = new javax.swing.JEditorPane();
        cbCargar = new javax.swing.JComboBox();
        lbltitle10 = new javax.swing.JLabel();
        progreso = new javax.swing.JProgressBar();
        jdFecha = new com.toedter.calendar.JDateChooser();
        lbltitle19 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(59, 123, 50)));
        setLayout(new java.awt.GridBagLayout());

        cbFinca.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        cbFinca.setForeground(new java.awt.Color(59, 123, 50));
        cbFinca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbFincaActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipady = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(0, 15, 0, 0);
        add(cbFinca, gridBagConstraints);

        lblTid.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblTid.setForeground(new java.awt.Color(59, 123, 50));
        lblTid.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblTid.setText("Finca");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(0, 15, 0, 0);
        add(lblTid, gridBagConstraints);

        lblTid3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblTid3.setForeground(new java.awt.Color(59, 123, 50));
        lblTid3.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblTid3.setText("Tipo Animales");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(0, 15, 0, 0);
        add(lblTid3, gridBagConstraints);

        cbTipoAnimales.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        cbTipoAnimales.setForeground(new java.awt.Color(59, 123, 50));
        cbTipoAnimales.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbTipoAnimalesActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipady = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(0, 15, 0, 0);
        add(cbTipoAnimales, gridBagConstraints);

        lblTid1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblTid1.setForeground(new java.awt.Color(59, 123, 50));
        lblTid1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblTid1.setText("Archivo");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.25;
        gridBagConstraints.insets = new java.awt.Insets(15, 15, 0, 0);
        add(lblTid1, gridBagConstraints);

        txtURL.setEditable(false);
        txtURL.setForeground(new java.awt.Color(59, 123, 50));
        txtURL.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        txtURL.setCaretColor(new java.awt.Color(59, 123, 50));
        txtURL.setSelectionColor(new java.awt.Color(26, 82, 118));
        txtURL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtURLActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipady = 15;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.25;
        gridBagConstraints.insets = new java.awt.Insets(0, 15, 0, 0);
        add(txtURL, gridBagConstraints);

        jSeparator1.setBackground(new java.awt.Color(59, 123, 50));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipady = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.25;
        gridBagConstraints.insets = new java.awt.Insets(0, 15, 0, 0);
        add(jSeparator1, gridBagConstraints);

        jPanel4.setBackground(new java.awt.Color(59, 123, 50));

        btnSelectArchivo.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnSelectArchivo.setForeground(new java.awt.Color(255, 255, 255));
        btnSelectArchivo.setText("Seleccionar Archivo");
        btnSelectArchivo.setBorderPainted(false);
        btnSelectArchivo.setContentAreaFilled(false);
        btnSelectArchivo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnSelectArchivoMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnSelectArchivoMouseExited(evt);
            }
        });
        btnSelectArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectArchivoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 154, Short.MAX_VALUE)
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addGap(0, 2, Short.MAX_VALUE)
                    .addComponent(btnSelectArchivo)
                    .addGap(0, 1, Short.MAX_VALUE)))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 30, Short.MAX_VALUE)
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(btnSelectArchivo, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 15, 0, 15);
        add(jPanel4, gridBagConstraints);

        btnCargar.setBackground(new java.awt.Color(255, 255, 255));
        btnCargar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/iconos/importarVerde.png"))); // NOI18N
        btnCargar.setToolTipText("Cargar Animales");
        btnCargar.setBorderPainted(false);
        btnCargar.setContentAreaFilled(false);
        btnCargar.setPreferredSize(new java.awt.Dimension(30, 30));
        btnCargar.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/img/iconos/importarVerde_over.png"))); // NOI18N
        btnCargar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCargarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 15, 0, 15);
        add(btnCargar, gridBagConstraints);

        scroll.setViewportView(txtRespuesta);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(15, 15, 15, 15);
        add(scroll, gridBagConstraints);

        cbCargar.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        cbCargar.setForeground(new java.awt.Color(59, 123, 50));
        cbCargar.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccionar", "Animal", "Pesaje", "Palpacion" }));
        cbCargar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbCargarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipady = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(0, 15, 0, 0);
        add(cbCargar, gridBagConstraints);

        lbltitle10.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lbltitle10.setForeground(new java.awt.Color(59, 123, 50));
        lbltitle10.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lbltitle10.setText("Cargar");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(15, 15, 0, 0);
        add(lbltitle10, gridBagConstraints);

        progreso.setBackground(new java.awt.Color(255, 255, 255));
        progreso.setForeground(new java.awt.Color(36, 151, 20));
        progreso.setMaximum(0);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipady = 9;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(15, 15, 0, 15);
        add(progreso, gridBagConstraints);

        jdFecha.setForeground(new java.awt.Color(59, 123, 50));
        jdFecha.setDateFormatString("dd/MM/yyyy");
        jdFecha.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.25;
        gridBagConstraints.insets = new java.awt.Insets(0, 15, 0, 0);
        add(jdFecha, gridBagConstraints);

        lbltitle19.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lbltitle19.setForeground(new java.awt.Color(59, 123, 50));
        lbltitle19.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lbltitle19.setText("Fecha");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.25;
        gridBagConstraints.insets = new java.awt.Insets(15, 15, 0, 0);
        add(lbltitle19, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void cbFincaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbFincaActionPerformed
        InformacionGlobal.setFincaDesdeEventoChange(cbFinca);
        
        if (cbFinca.getItemCount() > 0) {
            if (cbFinca.getSelectedIndex() >= 0) {
                idFinca = listaFincas.get(cbFinca.getSelectedIndex()).get("ID");
                CargarListaTipoAnimales();
            }
        }
    }//GEN-LAST:event_cbFincaActionPerformed

    private void cbTipoAnimalesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbTipoAnimalesActionPerformed
        InformacionGlobal.setTipoAnimalDesdeEventoChange(cbTipoAnimales);
        
        if (cbTipoAnimales.getItemCount() > 0) {
            if (cbTipoAnimales.getSelectedIndex() >= 0) {
                idTipoAnimal = listaTipoAnimales.get(cbTipoAnimales.getSelectedIndex()).get("ID");
            }
        }
    }//GEN-LAST:event_cbTipoAnimalesActionPerformed

    private void txtURLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtURLActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtURLActionPerformed

    private void btnSelectArchivoMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSelectArchivoMouseEntered
        Utilidades.establecerColorDeFondo(jPanel4, true);
    }//GEN-LAST:event_btnSelectArchivoMouseEntered

    private void btnSelectArchivoMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSelectArchivoMouseExited
        Utilidades.establecerColorDeFondo(jPanel4, false);
    }//GEN-LAST:event_btnSelectArchivoMouseExited

    private void btnSelectArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectArchivoActionPerformed
        txtURL.setText(Expresiones.seleccionarArchivoExcel(false, "C:/"));
        //System.out.println("txtURL-->"+txtURL.getText());
    }//GEN-LAST:event_btnSelectArchivoActionPerformed

    private void btnCargarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCargarActionPerformed
        listaIngresados = new ArrayList<>();
        listaNoIngresados = new ArrayList<>();
        txtRespuesta.setText("");
        int estado = Estados.DEFAULT;

        if (cbCargar.getSelectedItem().equals("Animal")) {
            estado = Estados.CARGA_MASIVA_ANIMALES;
        } else if (cbCargar.getSelectedItem().equals("Pesaje")) {
            estado = Estados.CARGA_MASIVA_PESAJE;
        } else if (cbCargar.getSelectedItem().equals("Palpacion")) {
            estado = Estados.CARGA_MASIVA_PALPACION;
        } else {
            JOptionPane.showMessageDialog(null, "Por favor seleccione un tipo de cargar para realizar la operación.");
            return;
        }

        thProceso = new CargaMasiva(this, estado);
        thProceso.iniciar();
    }//GEN-LAST:event_btnCargarActionPerformed

    private void cbCargarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbCargarActionPerformed
        mostrarFecha();
    }//GEN-LAST:event_cbCargarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCargar;
    public javax.swing.JButton btnSelectArchivo;
    public javax.swing.JComboBox cbCargar;
    public javax.swing.JComboBox cbFinca;
    public javax.swing.JComboBox cbTipoAnimales;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JSeparator jSeparator1;
    public com.toedter.calendar.JDateChooser jdFecha;
    private javax.swing.JLabel lblTid;
    private javax.swing.JLabel lblTid1;
    private javax.swing.JLabel lblTid3;
    private javax.swing.JLabel lbltitle10;
    private javax.swing.JLabel lbltitle19;
    public javax.swing.JProgressBar progreso;
    private javax.swing.JScrollPane scroll;
    private javax.swing.JEditorPane txtRespuesta;
    public javax.swing.JTextField txtURL;
    // End of variables declaration//GEN-END:variables

    private void CargarListaFincas() {
        listaFincas = controlgen.GetComboBox("SELECT '-1' AS ID, 'Seleccionar' AS DESCRIPCION\n"
                + "UNION\n"
                + "SELECT id AS ID, descripcion AS DESCRIPCION\n"
                + "FROM fincas\n"
                + "/*UNION \n"
                + "SELECT 'ALL' AS ID, 'TODOS' AS DESCRIPCION*/");

        Utilidades.LlenarComboBox(cbFinca, listaFincas, "DESCRIPCION");
        cbFinca.setSelectedIndex(1);
        CargarListaTipoAnimales();
        //EventoComboFincas();
    }

    private void CargarListaTipoAnimales() {
        listaTipoAnimales = controlgen.GetComboBox("SELECT '-1' AS ID, 'Seleccionar' AS DESCRIPCION\n"
                + "UNION\n"
                + "SELECT id AS ID, descripcion AS DESCRIPCION\n"
                + "FROM tipo_animales\n"
                + "WHERE id_finca = '" + idFinca + "' AND estado = 'Activo'\n"
                + "ORDER BY id ASC");

        Utilidades.LlenarComboBox(cbTipoAnimales, listaTipoAnimales, "DESCRIPCION");
        cbTipoAnimales.setSelectedIndex(0);
    }

    public void CargarAnimales() {
        try {
            String ruta = txtURL.getText().trim();
            ControlArchivo con = new ControlArchivo();
            if (idTipoAnimal.equals("-1")) {
                return;
            }
            if (idFinca.equals("-1")) {
                return;
            }
            if (ruta.equals("")) {
                return;
            }

            String ext = ruta.substring(ruta.lastIndexOf(".") + 1);
            if (ext.equals("xlsx")) {
                listaInfoLeida = con.LeerExcelAct(ruta, ConfiguracionPropiedades.getEST_CARGA_MASIVA_ANIMALES());
            } else {
                listaInfoLeida = con.LeerExcel(ruta);
            }

            if (listaInfoLeida == null) {
                thProceso.terminar();
                return;
            }
            
            int valor = 1;
            progreso.setMaximum(listaInfoLeida.size());
            String inGrupos = "", inHierros = "";
            int fila = 0;
            if (listaInfoLeida.size() > 0) {
                System.out.println("listaInfoLeida.size()" + listaInfoLeida.size());
                //<editor-fold defaultstate="collapsed" desc="Listar GRUPOS Y HIERRO">
                List<Map<String, String>> listaGrupos = Utilidades.data_list(1, listaInfoLeida, new String[]{"GRUPO"});
                List<Map<String, String>> listaHierros = Utilidades.data_list(1, listaInfoLeida, new String[]{"HIERRO"});
                System.out.println("listaGrupos-->" + listaGrupos.size());
                System.out.println("listaHierros-->" + listaHierros.size());
                inGrupos = getINMap(listaGrupos, "GRUPO");
                inHierros = getINMap(listaHierros, "HIERRO");
                if (inGrupos.equals("") || inHierros.equals("")) {
                    //<editor-fold defaultstate="collapsed" desc="RESPUESTA">
                    String motivo = "";
                    if (inGrupos.equals("")) {
                        motivo = "No se encontro ningún GRUPO que coincida con los que se encuentran en el sistema.";
                    } else {
                        motivo = "No se encontro ningún HIERRO que coincida con los que se encuentran en el sistema.";
                    }
                    txtRespuesta.setText("<html>\n"
                            + "<body>\n"
                            + "    <table>\n"
                            + "        <tr>\n"
                            + "            <td style=\"font-weight: bold; color: #990000;\">" + motivo + " </td>"
                            + "        </tr>\n"
                            + "    </table>\n"
                            + "</body>\n"
                            + "</html>");

                    //</editor-fold>
                    return;
                }
                List<Map<String, String>> listaInfoGrupos = controlgen.GetComboBox("SELECT id AS ID, descripcion AS DESCRIPCION\n"
                        + "FROM grupos \n"
                        + "WHERE id_tipo_animal = '" + idTipoAnimal + "' AND  UPPER(descripcion) IN (" + inGrupos.toUpperCase() + ")");

                List<Map<String, String>> listaInfoHierros = controlgen.GetComboBox("SELECT id AS ID, id_propietario AS IDPROPIETARIO, descripcion AS DESCRIPCION\n"
                        + "FROM propietarioxhierro\n"
                        + "WHERE UPPER(TRIM(descripcion)) IN (" + inHierros.toUpperCase() + ")");
//</editor-fold>

                for (Map<String, String> info : listaInfoLeida) {
                    progreso.setValue(valor++);
                    fila++;
                    Map<String, String> infoGrupo = getInfo(listaInfoGrupos, info.get("GRUPO"), "DESCRIPCION");
                    Map<String, String> infoHierro = getInfo(listaInfoHierros, info.get("HIERRO"), "DESCRIPCION");
                    info.put("IDFINCA", "" + idFinca);
                    info.put("IDTIPOANIMAL", "" + idTipoAnimal);
                    Calendar c = Calendar.getInstance();

                    //<editor-fold defaultstate="collapsed" desc="Sexo">
                    String s = info.get("SEXO");
                    System.out.println("s-->" + s);
                    if (s.length() > 1) {
                        s = s.substring(0, 1);
                    }
                    System.out.println("s--" + s);
                    if (s.toUpperCase().equals("M")) {
                        info.put("SEXO", "macho");
                    } else if (s.toUpperCase().equals("H")) {
                        info.put("SEXO", "hembra");
                    } else {
                        info.put("SEXO", "");
                    }
//</editor-fold>

                    if (infoGrupo.isEmpty() || infoHierro.isEmpty() || info.get("SEXO").equals("") || info.get("FEC_NACIMIENTO").equals("_")) {
                        String motivo = "";
                        //<editor-fold defaultstate="collapsed" desc="Motivo">
                        if (info.get("SEXO").equals("")) {
                            motivo = "No se encontro un sexo especifico para el animal. por favor verifique e intentelo nuevamente.";
                        }
                        if (infoGrupo.isEmpty()) {
                            motivo = "No se entontro el Grupo " + Utilidades.decodificarElemento(info.get("GRUPO")) + " registrado en el sistema. por favor verifique e intentelo nuevamente.";
                        } 
                        if (infoHierro.isEmpty()) {
                            motivo = "No se entontro el Hierro " + Utilidades.decodificarElemento(info.get("HIERRO")) + " registrado en el sistema. por favor verifique e intentelo nuevamente.";
                        }
                        if (info.get("FEC_NACIMIENTO").equals("_")) {
                            motivo = "La fecha de Nacimiento no puede estar vacia. por favor verifique e intentelo nuevamente.";
                        }
//</editor-fold>
                        info.put("MOTIVO", "" + motivo);
                        info.put("FILA", "" + fila);
                        listaNoIngresados.add(info);
                        continue;
                    }

                    //<editor-fold defaultstate="collapsed" desc="Validaciones">
                    info.put("IDGRUPO", infoGrupo.get("ID"));
                    info.put("IDHIERRO", infoHierro.get("ID"));
                    String aux = "";
                    aux = info.get("HIERRO_C");
                    if (aux.equals("_") || aux.substring(0, 1).toUpperCase().equals("N")) {
                        info.put("HIERRO_C", "0");
                    } else {
                        info.put("HIERRO_C", "1");
                    }
                    aux = info.get("CAPADO");
                    if (aux.equals("_") || aux.substring(0, 1).toUpperCase().equals("N")) {
                        info.put("CAPADO", "No");
                    } else {
                        info.put("CAPADO", "Si");
                    }
                    aux = info.get("DESCORNADO");
                    if (aux.equals("_") || aux.substring(0, 1).toUpperCase().equals("N")) {
                        info.put("DESCORNADO", "0");
                    } else {
                        info.put("DESCORNADO", "1");
                    }
                    aux = info.get("IMPLANTE");
                    if (aux.equals("_") || aux.substring(0, 1).toUpperCase().equals("N")) {
                        info.put("IMPLANTE", "0");
                    } else {
                        info.put("IMPLANTE", "1");
                    }
                    aux = info.get("DESTETE");
                    if (aux.equals("") || aux.substring(0, 1).toUpperCase().equals("N")) {
                        info.put("DESTETE", "0");
                    } else {
                        info.put("DESTETE", "1");
                    }

                    if (!info.get("FEC_NACIMIENTO").equals("_")) {
                        String[] dat = info.get("FEC_NACIMIENTO").split("/");
                        info.put("FEC_NACIMIENTO", dat[2] + "-" + dat[1] + "-" + dat[0]);
                    }
                    if (!info.get("FEC_DESTETE").equals("_")) {
                        String[] dat = info.get("FEC_DESTETE").split("/");
                        info.put("FEC_DESTETE", dat[2] + "-" + dat[1] + "-" + dat[0]);
                    } else {
                        info.put("FEC_DESTETE", "1900-01-01");
                    }

                    if (info.get("PESO_DESTETE").equals("_")) {
                        info.put("PESO_DESTETE", "0");
                    }
                    if (info.get("PESO").equals("_")) {
                        info.put("PESO", "0");
                    }
                    if (info.get("PESO_NACIMIENTO").equals("_")) {
                        info.put("PESO_NACIMIENTO", "0");
                    }
                    if (info.get("NUM_PARTOS").equals("_")) {
                        info.put("NUM_PARTOS", "0");
                    }
                    if (info.get("SEXO").equals("macho")) {
                        info.put("NUM_PARTOS", "NULL");
                    }
                    if(info.get("SEXO").equals("macho")){
                        info.put("ES_MADRE", "NULL");
                    }else{
                        if(Integer.parseInt(info.get("NUM_PARTOS"))>0){
                            info.put("ES_MADRE", "Si");
                        }else{
                            info.put("ES_MADRE", "No");
                        }
                    }
                    info.put("ID_USUARIO", ""+datos.get(0).get("ID_USUARIO"));
                    //</editor-fold>
                    List<Map<String, String>> InfoAnimal = controlgen.GetComboBox("SELECT id AS ID FROM ranimales  WHERE numero = '" + info.get("NUM_ANIMAL") + "' AND id_tipo_animal = '" + idTipoAnimal + "'");
                    int resp = -10;
                    info.put("NUMERO_DESCENDIENTE", controlCarga.ObtenerUltimoDescendiente(info.get("NUM_MADRE"), idTipoAnimal));
                    if (InfoAnimal.size() > 0) {
                        info.put("IDANIMAL", "" + InfoAnimal.get(0).get("ID"));
                        resp = controlCarga.ActualizarAnimal(info);
                    } else {
                        resp = controlCarga.GuardarAnimal(info);
                    }

                    if (resp == Retorno.EXITO) {
                        listaIngresados.add(info);
                    } else {
                        String motivo = "";
                        if (resp == Retorno.ERROR) {
                            motivo = "Ocurrio un error al momento de guardar al animal. por favor verifique la información e intentelo nuevamente.";
                        } else if (resp == Retorno.EXCEPCION_SQL) {
                            motivo = "Ocurrio un error de conexión con la Base de Datos al momento de guardar al animal. por favor Comuniquese on el ADMIN del sistema.";
                        } else {
                            motivo = "Ocurrio un error inesperado al momento de guardar al animal. por favor Comuniquese on el ADMIN del sistema.";
                        }
                        info.put("FILA", "" + fila);
                        info.put("MOTIVO", "" + motivo);
                        listaNoIngresados.add(info);
                    }
                }
                //<editor-fold defaultstate="collapsed" desc="RESPUESTA">

                txtRespuesta.setText("<html>\n"
                        + "<body>\n"
                        + "    <table>\n"
                        + "        <tr>\n"
                        + "            <td style=\"text-align: right; font-weight: bold;\">Animales Ingresados:</td>\n"
                        + "            <td>" + listaIngresados.size() + "</td>\n"
                        + (listaNoIngresados.size() > 0
                        ? "            <td style=\"text-align: right; font-weight: bold;\">Animales No Ingresados:</td>\n"
                        + "            <td>" + listaNoIngresados.size() + "</td>\n"
                        : "")
                        + "        </tr>\n"
                        + "        <tr>\n"
                        + "            <td colspan=\"" + (listaNoIngresados.size() > 0 ? "4" : "2") + "\" style=\"text-align: center;\">###</td>"
                        + "        </tr>\n"
                        + "    </table>\n"
                        + "</body>\n"
                        + "</html>");

                if (listaNoIngresados.size() > 0) {
                    String tblNoIngresados = "<table style=\"border-collapse: collapse;\">\n"
                            + "                    <tr style=\"background-color: #3B7B32; color: white;\">\n"
                            + "                        <td style=\"text-align: center; border: 1px solid #3B7B32;\">#</td>\n"
                            + "                        <td style=\"text-align: center; border: 1px solid #3B7B32;\">Fila Excel</td>\n"
                            + "                        <td style=\"text-align: center; border: 1px solid #3B7B32;\">Numero Animal</td>\n"
                            + "                        <td style=\"text-align: center; border: 1px solid #3B7B32;\">Motivo</td>\n"
                            + "                    </tr>";
                    for (int i = 0; i < listaNoIngresados.size(); i++) {
                        tblNoIngresados += "<tr style=\"background-color: " + (i % 2 == 0 ? "#ededed" : "#62885d") + "; "
                                + "" + (i % 2 != 0 ? "color: #FFFFFF;" : "") + "\">\n"
                                + "                        <td style='text-align: center;'>" + (i + 1) + "</td>\n"
                                + "                        <td style='text-align: center;'>" + listaNoIngresados.get(i).get("FILA") + "</td>\n"
                                + "                        <td style='text-align: center;'>" + listaNoIngresados.get(i).get("NUM_ANIMAL") + "</td>\n"
                                + "                        <td>" + listaNoIngresados.get(i).get("MOTIVO") + "</td>\n"
                                + "                    </tr>";
                    }
                    tblNoIngresados += "</table>";
                    txtRespuesta.setText(txtRespuesta.getText().replace("###", tblNoIngresados));
                } else {
                    txtRespuesta.setText(txtRespuesta.getText().replace("###", ""));
                }
                //</editor-fold>
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Ocurrio un error al momento de realizar la operación. Error: " + e.toString());
        }
    }

    public void CargarPesaje() {
        try {
            String ruta = txtURL.getText().trim();
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            ControlArchivo con = new ControlArchivo();
            cal = jdFecha.getCalendar();
            String fecha = sdf.format(cal.getTime());
            if (idTipoAnimal.equals("-1")) {
                return;
            }
            if (idFinca.equals("-1")) {
                return;
            }
            if (ruta.equals("")) {
                return;
            }

            String ext = ruta.substring(ruta.lastIndexOf(".") + 1);
            if (ext.equals("xlsx")) {
                listaInfoLeida = con.LeerExcelAct(ruta, ConfiguracionPropiedades.getEST_CARGA_MASIVA_PESAJE());
            } else {
                listaInfoLeida = con.LeerExcel(ruta);
            }

            if (listaInfoLeida == null) {
                thProceso.terminar();
                return;
            }

            int valor = 1;
            progreso.setMaximum(listaInfoLeida.size());

            String inMedicamentos = "", inNumAnimales = "";
            int fila = 0;
            if (listaInfoLeida.size() > 0) {
                List<String> listaMedicamentos = new ArrayList<>();
                System.out.println("listaInfoLeida.size()" + listaInfoLeida.size());
                //<editor-fold defaultstate="collapsed" desc="MEDICAMENTOS">
                for (Map.Entry<String, String> entry : listaInfoLeida.get(0).entrySet()) {
                    String key = entry.getKey();
                    if (key.indexOf("MED_") >= 0) {
                        listaMedicamentos.add(key.replace("MED_", ""));
                    }
                }
                inNumAnimales = getINMap(listaInfoLeida, new String[]{"NUM_HIJO", "NUM_MAMA"}, "<:-:>");
                inMedicamentos = getIN(listaMedicamentos);

                List<Map<String, String>> listaInfoMedicamentos = new ArrayList<>();
                if (listaMedicamentos.size() > 0) {
                    listaInfoMedicamentos = controlgen.GetComboBox("SELECT id AS ID, descripcion AS DESCRIPCION\n"
                            + "FROM medicamentos \n"
                            + "WHERE descripcion IN (" + inMedicamentos + ")");
                }
                List<Map<String, String>> listaInfoAnimal = controlgen.GetComboBox("SELECT * \n"
                        + "FROM animales\n"
                        + "WHERE CONCAT(numero,'<:-:>', numero_mama) IN (" + inNumAnimales + ") AND id_tipo_animal = '" + idTipoAnimal + "'");
                //</editor-fold>

                for (Map<String, String> info : listaInfoLeida) {
                    progreso.setValue(valor++);
                    fila++;
                    info.put("IDFINCA", "" + idFinca);
                    info.put("IDTIPOANIMAL", "" + idTipoAnimal);
                    info.put("FEC_PESAJE", "" + fecha);

                    List<Map<String, String>> datoAnimal = Utilidades.data_list(10, listaInfoAnimal, new String[]{"id"}, new String[]{"numero<->" + info.get("NUM_HIJO"), "numero_mama<->" + info.get("NUM_MAMA")});
                    System.out.println("datoAnimal---->" + datoAnimal.size());
                    info.put("IDANIMAL", "" + datoAnimal.get(0).get("id"));
                    info.put("HIERRO", "" + datoAnimal.get(0).get("hierro_fisico"));
                    info.put("DESCORNADO", "" + datoAnimal.get(0).get("descornado"));
                    info.put("IMPLANTE", "" + datoAnimal.get(0).get("implante"));
                    info.put("DESTETE", datoAnimal.get(0).get("fecha_destete").equals("1900-01-01") ? "0" : "1");
                    //<editor-fold defaultstate="collapsed" desc="Validaciones">
                    if (info.get("PESO_ANT").equals("_")) {
                        info.put("PESO_ANT", "" + datoAnimal.get(0).get("peso"));
                    }

                    if (info.get("PESO").equals("_")) {
                        //VALI
                        info.put("FILA", "" + fila);
                        info.put("MOTIVO", "El peso se encuentra vacio.");
                        listaNoIngresados.add(info);
                        continue;
                    }
                    if (info.get("TIPO_PESAJE").substring(0, 1).toUpperCase().equals("L")) {
                        Double peso = Double.parseDouble(info.get("PESO").replace(",", "."));
                        Double resultado = peso / Utilidades.FACTOR_CONVERSION;
                        long resultadoRedondeado = Math.round(resultado);
                        info.put("PESO", "" + resultadoRedondeado);
                    }
                    //</editor-fold>
                    List<Map<String, String>> ListaMedicamentosxPesaje = new ArrayList<>();
                    //<editor-fold defaultstate="collapsed" desc="Medicamentos Map">
                    for (String med : listaMedicamentos) {

                        if (!info.get("MED_" + med).equals("_")) {
                            Map<String, String> mapMed = new HashMap<>();
                            List<Map<String, String>> datoMedicamento = Utilidades.data_list(10, listaInfoMedicamentos, new String[]{"ID"}, new String[]{"DESCRIPCION<->" + med});
                            mapMed.put("IDMEDICAMENTO", "" + datoMedicamento.get(0).get("ID"));
                            mapMed.put("MEDICAMENTO", "" + datoMedicamento.get(0).get("DESCRIPCION"));
                            mapMed.put("DOSIS", "" + info.get("MED_" + med));
                            mapMed.put("IDANIMAL", "" + datoAnimal.get(0).get("id"));
                            ListaMedicamentosxPesaje.add(mapMed);
                        }
                    }
                    //</editor-fold>

                    int resp = controlCarga.GuardarPesaje(info);
                    int resp2 = -1;
                    if (ListaMedicamentosxPesaje.size() > 0) {
                        resp2 = controlCarga.GuardarMedicamentoxPesaje(ListaMedicamentosxPesaje);
                    }

                    if (resp == Retorno.EXITO) {
                        listaIngresados.add(info);
                    } else {
                        String motivo = "";
                        if (resp == Retorno.ERROR) {
                            motivo = "Ocurrio un error al momento de guardar al animal. por favor verifique la información e intentelo nuevamente.";
                        } else if (resp == Retorno.EXCEPCION_SQL) {
                            motivo = "Ocurrio un error de conexión con la Base de Datos al momento de guardar al animal. por favor Comuniquese on el ADMIN del sistema.";
                        } else {
                            motivo = "Ocurrio un error inesperado al momento de guardar al animal. por favor Comuniquese on el ADMIN del sistema.";
                        }
                        info.put("FILA", "" + fila);
                        info.put("MOTIVO", "" + motivo);
                        listaNoIngresados.add(info);
                    }
                }
                //<editor-fold defaultstate="collapsed" desc="RESPUESTA">

                txtRespuesta.setText("<html>\n"
                        + "<body>\n"
                        + "    <table>\n"
                        + "        <tr>\n"
                        + "            <td style=\"text-align: right; font-weight: bold;\">Animales Ingresados:</td>\n"
                        + "            <td>" + listaIngresados.size() + "</td>\n"
                        + (listaNoIngresados.size() > 0
                        ? "            <td style=\"text-align: right; font-weight: bold;\">Animales No Ingresados:</td>\n"
                        + "            <td>" + listaNoIngresados.size() + "</td>\n"
                        : "")
                        + "        </tr>\n"
                        + "        <tr>\n"
                        + "            <td colspan=\"" + (listaNoIngresados.size() > 0 ? "4" : "2") + "\" style=\"text-align: center;\">###</td>"
                        + "        </tr>\n"
                        + "    </table>\n"
                        + "</body>\n"
                        + "</html>");

                if (listaNoIngresados.size() > 0) {
                    String tblNoIngresados = "<table style=\"border-collapse: collapse;\">\n"
                            + "                    <tr style=\"background-color: #3B7B32; color: white;\">\n"
                            + "                        <td style=\"text-align: center; border: 1px solid #3B7B32;\">#</td>\n"
                            + "                        <td style=\"text-align: center; border: 1px solid #3B7B32;\">Fila Excel</td>\n"
                            + "                        <td style=\"text-align: center; border: 1px solid #3B7B32;\">Numero Animal</td>\n"
                            + "                        <td style=\"text-align: center; border: 1px solid #3B7B32;\">Motivo</td>\n"
                            + "                    </tr>";
                    for (int i = 0; i < listaNoIngresados.size(); i++) {
                        tblNoIngresados += "<tr style=\"background-color: " + (i % 2 == 0 ? "#ededed" : "#62885d") + "; "
                                + "" + (i % 2 != 0 ? "color: #FFFFFF;" : "") + "\">\n"
                                + "                        <td style='text-align: center;'>" + (i + 1) + "</td>\n"
                                + "                        <td style='text-align: center;'>" + listaNoIngresados.get(i).get("FILA") + "</td>\n"
                                + "                        <td style='text-align: center;'>" + listaNoIngresados.get(i).get("NUM_HIJO") + "</td>\n"
                                + "                        <td>" + listaNoIngresados.get(i).get("MOTIVO") + "</td>\n"
                                + "                    </tr>";
                    }
                    tblNoIngresados += "</table>";
                    txtRespuesta.setText(txtRespuesta.getText().replace("###", tblNoIngresados));
                } else {
                    txtRespuesta.setText(txtRespuesta.getText().replace("###", ""));
                }
                //</editor-fold>
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }

    public void CargarPalpacion() {
        try {
            String ruta = txtURL.getText().trim();
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            ControlArchivo con = new ControlArchivo();
            cal = jdFecha.getCalendar();
            String fecha = sdf.format(cal.getTime());
            if (idTipoAnimal.equals("-1")) {
                return;
            }
            if (idFinca.equals("-1")) {
                return;
            }
            if (ruta.equals("")) {
                return;
            }
            String ext = ruta.substring(ruta.lastIndexOf(".") + 1);
            if (ext.equals("xlsx")) {
                listaInfoLeida = con.LeerExcelAct(ruta, ConfiguracionPropiedades.getEST_CARGA_MASIVA_PALPACION());
            } else {
                listaInfoLeida = con.LeerExcel(ruta);
            }

            if (listaInfoLeida == null) {
                thProceso.terminar();
                return;
            }

            int valor = 1;
            progreso.setMaximum(listaInfoLeida.size());

            String inMedicamentos = "", inNumAnimales = "";
            int fila = 0;
            if (listaInfoLeida.size() > 0) {
                List<String> listaMedicamentos = new ArrayList<>();
                System.out.println("listaInfoLeida.size()" + listaInfoLeida.size());
                //<editor-fold defaultstate="collapsed" desc="MEDICAMENTOS">
                for (Map.Entry<String, String> entry : listaInfoLeida.get(0).entrySet()) {
                    String key = entry.getKey();
                    if (key.indexOf("MED_") >= 0) {
                        listaMedicamentos.add(key.replace("MED_", ""));
                    }
                }
                inNumAnimales = getINMap(listaInfoLeida, new String[]{"NUM_HIJO", "NUM_MAMA"}, "<:-:>");
                inMedicamentos = getIN(listaMedicamentos);

                List<Map<String, String>> listaInfoMedicamentos = new ArrayList<>();
                if (listaMedicamentos.size() > 0) {
                    listaInfoMedicamentos = controlgen.GetComboBox("SELECT id AS ID, descripcion AS DESCRIPCION\n"
                            + "FROM medicamentos \n"
                            + "WHERE descripcion IN (" + inMedicamentos + ")");
                }
                List<Map<String, String>> listaInfoAnimal = controlgen.GetComboBox("SELECT * \n"
                        + "FROM animales\n"
                        + "WHERE CONCAT(numero,'<:-:>', numero_mama) IN (" + inNumAnimales + ") "
                        + "AND id_tipo_animal = '" + idTipoAnimal + "'");
                //</editor-fold>

                for (Map<String, String> info : listaInfoLeida) {
                    progreso.setValue(valor++);
                    fila++;
                    info.put("IDFINCA", "" + idFinca);
                    info.put("IDTIPOANIMAL", "" + idTipoAnimal);
                    info.put("FEC_PALPACION", "" + fecha);

                    List<Map<String, String>> datoAnimal = Utilidades.data_list(10, listaInfoAnimal, new String[]{"id"}, new String[]{"numero<->" + info.get("NUM_HIJO"), "numero_mama<->" + info.get("NUM_MAMA")});
                    System.out.println("datoAnimal---->" + datoAnimal.size());
                    info.put("IDANIMAL", "" + datoAnimal.get(0).get("id"));
                    info.put("DESCARTE", "0");
                    info.put("RAZON_DESCARTE", "");

                    //<editor-fold defaultstate="collapsed" desc="Validaciones">
                    info.put("ESTADO", ValidarName(info.get("ESTADO")));

                    if (info.get("ESTADO").equals("_") || !Utilidades.ValidarEstado(info.get("ESTADO"))) {
                        //VALI
                        info.put("FILA", "" + fila);
                        info.put("MOTIVO", "No se encontro ningún estado valido para la palpación (vacia, preñada, repaso). Por favor Verifique la información.");
                        listaNoIngresados.add(info);
                        continue;
                    }
                    if (info.get("ESTADO").substring(0, 1).toUpperCase().equals("P")) {
                        //JOptionPane.showMessageDialog(null, "info.get(NUM_MESES)"+info.get("NUM_MESES")+" ----- CONDICION--->"+Expresiones.validarSoloNumerosP(info.get("NUM_MESES").replace(".", ",")));
                        if (info.get("NUM_MESES").equals("_") || !Expresiones.validarSoloNumerosP(info.get("NUM_MESES").replace(".", ","))) {
                            info.put("FILA", "" + fila);
                            info.put("MOTIVO", "El numero de meses ingresado no es valio para el estado de PREÑADA.");
                            listaNoIngresados.add(info);
                            continue;
                        }
                    } else {
                        info.put("NUM_MESES", "0");
                    }
                    if (info.get("NUM_MESES").equals("_")) {
                        info.put("NUM_MESES", "0");
                    }
                    //</editor-fold>
                    List<Map<String, String>> ListaMedicamentosxPesaje = new ArrayList<>();
                    //<editor-fold defaultstate="collapsed" desc="Medicamentos Map">

                    for (String med : listaMedicamentos) {
                        System.out.println("info.get(MED_" + med + ")---->" + info.get("MED_" + med));
                        if (info.containsKey("MED_" + med)) {
                            if (!info.get("MED_" + med).equals("_")) {
                                Map<String, String> mapMed = new HashMap<>();
                                List<Map<String, String>> datoMedicamento = Utilidades.data_list(10, listaInfoMedicamentos, new String[]{"ID"}, new String[]{"DESCRIPCION<->" + med});
                                mapMed.put("IDMEDICAMENTO", "" + datoMedicamento.get(0).get("ID"));
                                mapMed.put("MEDICAMENTO", "" + datoMedicamento.get(0).get("DESCRIPCION"));
                                mapMed.put("DOSIS", "" + info.get("MED_" + med));
                                mapMed.put("IDANIMAL", "" + datoAnimal.get(0).get("id"));
                                ListaMedicamentosxPesaje.add(mapMed);
                            }
                        }
                    }
                    //</editor-fold>

                    int resp = controlCarga.GuardarPalpacion(info);
                    int resp2 = -1;
                    if (ListaMedicamentosxPesaje.size() > 0) {
                        resp2 = controlCarga.GuardarMedicamentoxPalpacion(ListaMedicamentosxPesaje);
                    }

                    if (resp == Retorno.EXITO) {
                        listaIngresados.add(info);
                    } else {
                        String motivo = "";
                        if (resp == Retorno.ERROR) {
                            motivo = "Ocurrio un error al momento de guardar al animal. por favor verifique la información e intentelo nuevamente.";
                        } else if (resp == Retorno.EXCEPCION_SQL) {
                            motivo = "Ocurrio un error de conexión con la Base de Datos al momento de guardar al animal. por favor Comuniquese on el ADMIN del sistema.";
                        } else {
                            motivo = "Ocurrio un error inesperado al momento de guardar al animal. por favor Comuniquese on el ADMIN del sistema.";
                        }
                        info.put("FILA", "" + fila);
                        info.put("MOTIVO", "" + motivo);
                        listaNoIngresados.add(info);
                    }
                }
                //<editor-fold defaultstate="collapsed" desc="RESPUESTA">

                txtRespuesta.setText("<html>\n"
                        + "<body>\n"
                        + "    <table>\n"
                        + "        <tr>\n"
                        + "            <td style=\"text-align: right; font-weight: bold;\">Animales Ingresados:</td>\n"
                        + "            <td>" + listaIngresados.size() + "</td>\n"
                        + (listaNoIngresados.size() > 0
                        ? "            <td style=\"text-align: right; font-weight: bold;\">Animales No Ingresados:</td>\n"
                        + "            <td>" + listaNoIngresados.size() + "</td>\n"
                        : "")
                        + "        </tr>\n"
                        + "        <tr>\n"
                        + "            <td colspan=\"" + (listaNoIngresados.size() > 0 ? "4" : "2") + "\" style=\"text-align: center;\">###</td>"
                        + "        </tr>\n"
                        + "    </table>\n"
                        + "</body>\n"
                        + "</html>");

                if (listaNoIngresados.size() > 0) {
                    String tblNoIngresados = "<table style=\"border-collapse: collapse;\">\n"
                            + "                    <tr style=\"background-color: #3B7B32; color: white;\">\n"
                            + "                        <td style=\"text-align: center; border: 1px solid #3B7B32;\">#</td>\n"
                            + "                        <td style=\"text-align: center; border: 1px solid #3B7B32;\">Fila Excel</td>\n"
                            + "                        <td style=\"text-align: center; border: 1px solid #3B7B32;\">Numero Animal</td>\n"
                            + "                        <td style=\"text-align: center; border: 1px solid #3B7B32;\">Motivo</td>\n"
                            + "                    </tr>";
                    for (int i = 0; i < listaNoIngresados.size(); i++) {
                        tblNoIngresados += "<tr style=\"background-color: " + (i % 2 == 0 ? "#ededed" : "#62885d") + "; "
                                + "" + (i % 2 != 0 ? "color: #FFFFFF;" : "") + "\">\n"
                                + "                        <td style='text-align: center;'>" + (i + 1) + "</td>\n"
                                + "                        <td style='text-align: center;'>" + listaNoIngresados.get(i).get("FILA") + "</td>\n"
                                + "                        <td style='text-align: center;'>" + listaNoIngresados.get(i).get("NUM_HIJO") + "</td>\n"
                                + "                        <td>" + listaNoIngresados.get(i).get("MOTIVO") + "</td>\n"
                                + "                    </tr>";
                    }
                    tblNoIngresados += "</table>";
                    txtRespuesta.setText(txtRespuesta.getText().replace("###", tblNoIngresados));
                } else {
                    txtRespuesta.setText(txtRespuesta.getText().replace("###", ""));
                }
                //</editor-fold>
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Ocurrio un error al momento de realizar la operación. Error: " + e.toString());
        }
    }

    private String getINMap(List<Map<String, String>> lista, String Key) {
        try {
            String in = "";

            for (int i = 0; i < lista.size(); i++) {
                System.out.println(i + ":[");
                for (Map.Entry<String, String> entry : lista.get(i).entrySet()) {
                    String k = entry.getKey();
                    String v = entry.getValue();
                    System.out.println("\t{\n\t\tkey: " + k + ",\n\t\tvalue: " + v + "\n\t}");
                }
                System.out.println("]");
            }

            for (Map<String, String> map : lista) {
                if (map.get(Key).equals("_")) {
                    continue;
                }
                in += (in.equals("") ? "" : ",") + "'" + map.get(Key) + "'";
            }

            return in;
        } catch (Exception e) {
            e.printStackTrace();
            return "";
        }
    }

    private String getINMap(List<Map<String, String>> lista, String[] keys, String split) {
        try {
            String in = "";

            for (Map<String, String> map : lista) {
                String dato = "";
                for (String k : keys) {
                    if (map.get(k).equals("_")) {
                        dato = "";
                        break;
                    }
                    dato += (dato.equals("") ? "" : split) + map.get(k);
                }
                if (!dato.equals("")) {
                    in += (in.equals("") ? "" : ",") + "'" + dato + "'";
                }
            }

            return in;
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    private String getIN(List<String> lista) {
        try {
            String in = "";

            for (String map : lista) {
                in += (in.equals("") ? "" : ",") + "'" + map + "'";
            }

            return in;
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    private Map<String, String> getInfo(List<Map<String, String>> lista, String valorB, String Key) {
        Map<String, String> ret = new HashMap<String, String>();

        for (Map<String, String> map : lista) {
            if (Utilidades.CodificarElemento(map.get(Key)).equals(valorB)) {
                return map;
            }
        }

        return ret;
    }

    private String ValidarName(String estado) {
        String ret = "";
        System.out.println("estado---" + estado);
        switch (estado.substring(0, 1).toLowerCase()) {
            case "v":
                ret = "vacia";
                break;
            case "r":
                ret = "repaso";
                break;
            case "p":
                ret = "preñada";
                break;
            default:
                ret = estado;
        }
        System.out.println("ret--->" + ret);
        return ret;
    }

    private void mostrarFecha() {
        boolean mostrar = false;
        if (cbCargar.getSelectedItem().equals("Animal")) {
            mostrar = false;
        } else if (cbCargar.getSelectedItem().equals("Pesaje")) {
            mostrar = true;
        } else if (cbCargar.getSelectedItem().equals("Palpacion")) {
            mostrar = true;
        } else {
            mostrar = false;
        }
        lbltitle19.setVisible(mostrar);
        jdFecha.setVisible(mostrar);
        jdFecha.setCalendar(cal);
    }

}
